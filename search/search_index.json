{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"geojson-pydantic","text":"<p> Pydantic models for GeoJSON. </p> <p> </p> <p>Documentation: developmentseed.org/geojson-pydantic/</p> <p>Source Code: developmentseed/geojson-pydantic</p>"},{"location":"#description","title":"Description","text":"<p><code>geojson_pydantic</code> provides a suite of Pydantic models matching the GeoJSON specification rfc7946. Those models can be used for creating or validating geojson data.</p>"},{"location":"#install","title":"Install","text":"<pre><code>$ python -m pip install -U pip\n$ python -m pip install geojson-pydantic\n</code></pre> <p>Or install from source:</p> <pre><code>$ python -m pip install -U pip\n$ python -m pip install git+https://github.com/developmentseed/geojson-pydantic.git\n</code></pre> <p>Install with conda from <code>conda-forge</code>:</p> <pre><code>$ conda install -c conda-forge geojson-pydantic\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>See CONTRIBUTING.md.</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"#authors","title":"Authors","text":"<p>Initial implementation by @geospatial-jeff; taken liberally from arturo-ai/stac-pydantic</p> <p>See contributors for a listing of individual contributors.</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"contributing/","title":"Contributing","text":"<p>To run the tests, first install the package in a virtual environment:</p> <pre><code>virtualenv venv\nsource venv/bin/activate\npython -m pip install -e '.[test]'\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov geojson_pydantic --cov-report term-missing\n</code></pre> <p>This repo is set to use pre-commit to run <code>isort</code>, <code>flake8</code>, <code>pydocstring</code>, <code>black</code> (\"uncompromising Python code formatter\") and <code>mypy</code> when committing new code.</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>we use c4urself/bump2version to update the package version.</p> <pre><code># Install bump2version\n$ pip install --upgrade bump2version\n\n# Update version (edit files, commit and create tag)\n# this will do `0.2.1 -&gt; 0.2.2` because we use the `patch` tag\n$ bump2version patch\n\n# Push change and tag to github\n$ git push origin main --tags\n</code></pre>"},{"location":"intro/","title":"Intro","text":""},{"location":"intro/#usage","title":"Usage","text":"<pre><code>from geojson_pydantic import Feature, FeatureCollection, Point\n\ngeojson_feature = {\n    \"type\": \"Feature\",\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13.38272, 52.46385],\n    },\n    \"properties\": {\n        \"name\": \"jeff\",\n    },\n}\n\n\nfeat = Feature(**geojson_feature)\nassert feat.type == \"Feature\"\nassert type(feat.geometry) == Point\nassert feat.properties[\"name\"] == \"jeff\"\n\nfc = FeatureCollection(type=\"FeatureCollection\", features=[geojson_feature, geojson_feature])\nassert fc.type == \"FeatureCollection\"\nassert len(fc.features) == 2\nassert type(fc.features[0].geometry) == Point\nassert fc.features[0].properties[\"name\"] == \"jeff\"\n</code></pre>"},{"location":"intro/#geometry-model-methods-and-properties","title":"Geometry Model methods and properties","text":"<ul> <li><code>__geo_interface__</code>: GeoJSON-like protocol for geo-spatial (GIS) vector data (spec).</li> <li><code>has_z</code>: returns true if any coordinate has a Z value.</li> <li><code>wkt</code>: returns the Well Known Text representation of the geometry.</li> <li><code>create</code>: create a geometry object without providing the <code>type</code> information</li> </ul>"},{"location":"intro/#for-polygon-geometry","title":"For Polygon geometry","text":"<ul> <li><code>exterior</code>: returns the exterior Linear Ring of the polygon.</li> <li><code>interiors</code>: returns the interiors (Holes) of the polygon.</li> <li><code>Polygon.from_bounds(xmin, ymin, xmax, ymax)</code>: creates a Polygon geometry from a bounding box.</li> </ul>"},{"location":"intro/#for-geometrycollection-and-featurecollection","title":"For GeometryCollection and FeatureCollection","text":"<ul> <li><code>iter()</code>: iterates over geometries or features</li> <li><code>length</code>: returns geometries or features count</li> </ul>"},{"location":"intro/#advanced-usage","title":"Advanced usage","text":"<p>In <code>geojson_pydantic</code> we've implemented pydantic's Generic Models which allow the creation of more advanced models to validate either the geometry type or the properties.</p> <p>In order to make use of this generic typing, there are two steps: first create a new model, then use that model to validate your data. To create a model using a <code>Generic</code> type, you HAVE TO pass <code>Type definitions</code> to the <code>Feature</code> model in form of <code>Feature[Geometry Type, Properties Type]</code>. Then pass your data to this constructor.</p> <p>By default <code>Feature</code> and <code>FeatureCollections</code> are defined using <code>geojson_pydantic.geometries.Geometry</code> for the geometry and <code>typing.Dict</code> for the properties.</p> <p>Here's an example where we want to validate that GeoJSON features have Polygon types, but don't do any specific property validation.</p> <pre><code>from typing import Dict\n\nfrom geojson_pydantic import Feature, Polygon\nfrom pydantic import BaseModel\n\ngeojson_feature = {\n    \"type\": \"Feature\",\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13.38272, 52.46385],\n    },\n    \"properties\": {\n        \"name\": \"jeff\",\n    },\n}\n\n# Define a Feature model with Geometry as `Polygon` and Properties as `Dict`\nMyPolygonFeatureModel = Feature[Polygon, Dict]\n\nfeat = MyPolygonFeatureModel(**geojson_feature)  # should raise Validation Error because `geojson_feature` is a point\n&gt;&gt;&gt; ValidationError: 3 validation errors for Feature[Polygon, Dict]\n...\ngeometry -&gt; type\n  unexpected value; permitted: 'Polygon' (type=value_error.const; given=Point; permitted=['Polygon'])\n\n\ngeojson_feature = {\n    \"type\": \"Feature\",\n    \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n            [\n                [13.38272, 52.46385],\n                [13.42786, 52.46385],\n                [13.42786, 52.48445],\n                [13.38272, 52.48445],\n                [13.38272, 52.46385],\n            ]\n        ],\n    },\n    \"properties\": {\n        \"name\": \"jeff\",\n    },\n}\n\nfeat = MyPolygonFeatureModel(**geojson_feature)\nassert type(feat.geometry) == Polygon\n</code></pre> <p>Or with optional geometry</p> <pre><code>from geojson_pydantic import Feature, Point\nfrom typing import Optional\n\nMyPointFeatureModel = Feature[Optional[Point], Dict]\n\nassert MyPointFeatureModel(type=\"Feature\", geometry=None, properties={}).geometry is None\nassert MyPointFeatureModel(type=\"Feature\", geometry=Point(type=\"Point\", coordinates=(0,0)), properties={}).geometry is not None\n</code></pre> <p>And now with constrained properties</p> <pre><code>from typing_extensions import Annotated\nfrom geojson_pydantic import Feature, Point\nfrom pydantic import BaseModel\n\n# Define a Feature model with Geometry as `Point` and Properties as a constrained Model\nclass MyProps(BaseModel):\n    name: Annotated[str, Field(pattern=r\"^(drew|vincent)$\")]\n\nMyPointFeatureModel = Feature[Point, MyProps]\n\ngeojson_feature = {\n    \"type\": \"Feature\",\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13.38272, 52.46385],\n    },\n    \"properties\": {\n        \"name\": \"jeff\",\n    },\n}\n\nfeat = MyPointFeatureModel(**geojson_feature)\n&gt;&gt;&gt; ValidationError: 1 validation error for Feature[Point, MyProps]\nproperties -&gt; name\n  string does not match regex \"^(drew|vincent)$\" (type=value_error.str.regex; pattern=^(drew|vincent)$)\n\ngeojson_feature[\"properties\"][\"name\"] = \"drew\"\nfeat = MyPointFeatureModel(**geojson_feature)\nassert feat.properties.name == \"drew\"\n</code></pre>"},{"location":"intro/#enforced-type-keys","title":"Enforced <code>type</code> Keys","text":"<p>Starting with version <code>0.6.0</code>, geojson-pydantic's classes will not define default keys such has <code>type</code>, <code>geometry</code> or <code>properties</code>. This is to make sure the library does well its first goal, which is <code>validating</code> GeoJSON object based on the specification</p> <pre><code>o A GeoJSON object has a member with the name \"type\".  The value of\n  the member MUST be one of the GeoJSON types.\n\no A Feature object HAS a \"type\" member with the value \"Feature\".\n\no A Feature object HAS a member with the name \"geometry\". The value\nof the geometry member SHALL be either a Geometry object as\ndefined above or, in the case that the Feature is unlocated, a\nJSON null value.\n\no A Feature object HAS a member with the name \"properties\". The\nvalue of the properties member is an object (any JSON object or a\nJSON null value).\n</code></pre> <pre><code>from geojson_pydantic import Point\n\n## Before 0.6\nPoint(coordinates=(0,0))\n&gt;&gt; Point(type='Point', coordinates=(0.0, 0.0), bbox=None)\n\n## After 0.6\nPoint(coordinates=(0,0))\n&gt;&gt; ValidationError: 1 validation error for Point\n   type\n      field required (type=value_error.missing)\n\nPoint(type=\"Point\", coordinates=(0,0))\n&gt;&gt; Point(type='Point', coordinates=(0.0, 0.0), bbox=None)\n</code></pre> <p>Starting with <code>2.1.0</code>, users can use the <code>.create()</code> methods to create geometries without the <code>type</code> information</p> <pre><code>from geojson_pydantic import Point\n\nPoint.create(coordinates=(0,0))\n# is equivalent to\nPoint(bbox=None, type='Point', coordinates=Position2D(longitude=0.0, latitude=0.0))\n</code></pre>"},{"location":"release-notes/","title":"Change Log","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog.</p> <p>Note: Minor version <code>0.X.0</code> update might break the API, It's recommended to pin geojson-pydantic to minor version: <code>geojson-pydantic&gt;=0.6,&lt;0.7</code></p>"},{"location":"release-notes/#unreleased","title":"unreleased","text":""},{"location":"release-notes/#210-2025-10-08","title":"[2.1.0] - 2025-10-08","text":"<ul> <li> <p>add <code>.create()</code> method to Geometry objects to create them without <code>type</code> key</p> <pre><code>from geojson_pydantic import Point\n\nPoint.create(coordinates=(0,0))\n&gt;&gt; Point(bbox=None, type='Point', coordinates=Position2D(longitude=0.0, latitude=0.0))\n</code></pre> </li> <li> <p>add python 3.14 support</p> </li> </ul>"},{"location":"release-notes/#200-2025-05-05","title":"2.0.0 - 2025-05-05","text":"<ul> <li> <p>remove custom <code>__iter__</code>, <code>__getitem__</code> and <code>__len__</code> methods from <code>GeometryCollection</code> class  breaking change</p> <pre><code>from geojson_pydantic.geometries import GeometryCollection, Point, MultiPoint\n\ngeoms = GeometryCollection(\n    type=\"GeometryCollection\",\n    geometries=[\n        Point(type=\"Point\", coordinates=(102.0, 0.5)),\n        MultiPoint(type=\"MultiPoint\", coordinates=[(100.0, 0.0), (101.0, 1.0)]),\n    ],\n)\n\n########\n# Before\nfor geom in geom:       # __iter__\n    pass\n\nassert len(geoms) == 2  # __len__\n\n_ = geoms[0]            # __getitem__\n\n#####\n# Now\nfor geom in geom.iter():   # __iter__\n    pass\n\nassert geoms.length == 2  # __len__\n\n_ = geoms.geometries[0]   # __getitem__\n</code></pre> </li> <li> <p>remove custom <code>__iter__</code>, <code>__getitem__</code> and <code>__len__</code> methods from <code>FeatureCollection</code> class  breaking change</p> <pre><code>from geojson_pydantic import FeatureCollection, Feature, Point\n\nfc = FeatureCollection(\n    type=\"FeatureCollection\", features=[\n        Feature(type=\"Feature\", geometry=Point(type=\"Point\", coordinates=(102.0, 0.5)), properties={\"name\": \"point1\"}),\n        Feature(type=\"Feature\", geometry=Point(type=\"Point\", coordinates=(102.0, 1.5)), properties={\"name\": \"point2\"}),\n    ]\n)\n\n########\n# Before\nfor feat in fc:      # __iter__\n    pass\n\nassert len(fc) == 2  # __len__\n\n_ = fc[0]            # __getitem__\n\n#####\n# Now\nfor feat in fc.iter(): # __iter__\n    pass\n\nassert fc.length == 2  # __len__\n\n_ = fe.features[0]     # __getitem__\n</code></pre> </li> <li> <p>make sure <code>GeometryCollection</code> are homogeneous for Z coordinates</p> <pre><code>from geojson_pydantic.geometries import Point, LineString, GeometryCollection\n# Before\nGeometryCollection(\n    type=\"GeometryCollection\",\n    geometries=[\n        Point(type=\"Point\", coordinates=[0, 0]),  # 2D point\n        LineString(\n            type=\"LineString\", coordinates=[(0.0, 0.0, 0.0), (1.0, 1.0, 1.0)]  # 3D LineString\n        ),\n    ],\n)\n&gt;&gt;&gt; GeometryCollection(bbox=None, type='GeometryCollection', geometries=[Point(bbox=None, type='Point', coordinates=Position3D(longitude=0.0, latitude=0.0, altitude=0.0)), LineString(bbox=None, type='LineString', coordinates=[Position3D(longitude=0.0, latitude=0.0, altitude=0.0), Position3D(longitude=1.0, latitude=1.0, altitude=1.0)])])\n\n# Now\nGeometryCollection(\n    type=\"GeometryCollection\",\n    geometries=[\n        Point(type=\"Point\", coordinates=[0, 0]),  # 2D point\n        LineString(\n            type=\"LineString\", coordinates=[(0.0, 0.0, 0.0), (1.0, 1.0, 1.0)]  # 3D LineString\n        ),\n    ],\n)\n&gt;&gt;&gt; ValidationError: 1 validation error for GeometryCollection\ngeometries\nValue error, GeometryCollection cannot have mixed Z dimensionality. [type=value_error, input_value=[Point(bbox=None, type='P...de=1.0, altitude=1.0)])], input_type=list]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\n</code></pre> </li> </ul>"},{"location":"release-notes/#120-2024-12-19","title":"1.2.0 - 2024-12-19","text":"<ul> <li>drop python 3.8 support</li> <li>add python 3.13 support</li> </ul>"},{"location":"release-notes/#112-2024-10-22","title":"1.1.2 - 2024-10-22","text":"<ul> <li>relax <code>bbox</code> validation and allow antimeridian crossing bboxes</li> </ul>"},{"location":"release-notes/#111-2024-08-29","title":"1.1.1 - 2024-08-29","text":"<ul> <li>add python 3.12 support</li> <li>switch to <code>flit-core</code> for packaging build backend</li> </ul>"},{"location":"release-notes/#110-2024-05-10","title":"1.1.0 - 2024-05-10","text":""},{"location":"release-notes/#added","title":"Added","text":"<ul> <li>Add Position2D and Position3D of type NamedTuple (author @impocode, developmentseed/geojson-pydantic!161)</li> </ul>"},{"location":"release-notes/#102-2024-01-16","title":"1.0.2 - 2024-01-16","text":""},{"location":"release-notes/#fixed","title":"Fixed","text":"<ul> <li>Temporary workaround for surfacing model attributes in FastAPI application (author @markus-work, developmentseed/geojson-pydantic!153)</li> </ul>"},{"location":"release-notes/#101-2023-10-04","title":"1.0.1 - 2023-10-04","text":""},{"location":"release-notes/#fixed_1","title":"Fixed","text":"<ul> <li>Model serialization when using include/exclude (ref: developmentseed/geojson-pydantic!148)</li> </ul>"},{"location":"release-notes/#100-2023-07-24","title":"1.0.0 - 2023-07-24","text":""},{"location":"release-notes/#fixed_2","title":"Fixed","text":"<ul> <li>reduce validation error message verbosity when discriminating Geometry types</li> <li>MultiPoint WKT now includes parentheses around each Point</li> </ul>"},{"location":"release-notes/#added_1","title":"Added","text":"<ul> <li>more tests for <code>GeometryCollection</code> warnings</li> </ul>"},{"location":"release-notes/#changed","title":"Changed","text":"<ul> <li> <p>update pydantic requirement to <code>~=2.0</code></p> </li> <li> <p>update pydantic <code>FeatureCollection</code> generic model to allow named features in the generated schemas.</p> <pre><code># before\nFeatureCollection[Geometry, Properties]\n\n# now\nFeatureCollection[Feature[Geometry, Properties]]\n</code></pre> </li> <li> <p>raise <code>ValueError</code> in <code>geometries.parse_geometry_obj</code> instead of <code>ValidationError</code></p> <pre><code># before\nparse_geometry_obj({\"type\": \"This type\", \"obviously\": \"doesn't exist\"})\n&gt;&gt; ValidationError\n\n# now\nparse_geometry_obj({\"type\": \"This type\", \"obviously\": \"doesn't exist\"})\n&gt;&gt; ValueError(\"Unknown type: This type\")\n</code></pre> </li> <li> <p>update JSON serializer to exclude null <code>bbox</code> and <code>id</code></p> <pre><code># before\nPoint(type=\"Point\", coordinates=[0, 0]).json()\n&gt;&gt; '{\"type\":\"Point\",\"coordinates\":[0.0,0.0],\"bbox\":null}'\n\n# now\nPoint(type=\"Point\", coordinates=[0, 0]).model_dump_json()\n&gt;&gt; '{\"type\":\"Point\",\"coordinates\":[0.0,0.0]}'\n</code></pre> </li> <li> <p>delete <code>geojson_pydantic.geo_interface.GeoInterfaceMixin</code> and replaced by <code>geojson_pydantic.base._GeoJsonBase</code> class</p> </li> <li> <p>delete <code>geojson_pydantic.types.validate_bbox</code></p> </li> </ul>"},{"location":"release-notes/#063-2023-07-02","title":"0.6.3 - 2023-07-02","text":"<ul> <li>limit pydantic requirement to <code>~=1.0</code></li> </ul>"},{"location":"release-notes/#062-2023-05-16","title":"0.6.2 - 2023-05-16","text":""},{"location":"release-notes/#added_2","title":"Added","text":"<ul> <li>Additional bbox validation (author @eseglem, developmentseed/geojson-pydantic!122)</li> </ul>"},{"location":"release-notes/#061-2023-05-12","title":"0.6.1 - 2023-05-12","text":""},{"location":"release-notes/#fixed_3","title":"Fixed","text":"<ul> <li>Fix issue with null bbox validation (author @bmschmidt, developmentseed/geojson-pydantic!119)</li> </ul>"},{"location":"release-notes/#060-2023-05-09","title":"0.6.0 - 2023-05-09","text":"<p>No change since 0.6.0a0</p>"},{"location":"release-notes/#060a0-2023-04-04","title":"[0.6.0a0] - 2023-04-04","text":""},{"location":"release-notes/#added_3","title":"Added","text":"<ul> <li>Validate order of bounding box values. (author @moradology, developmentseed/geojson-pydantic!114)</li> <li> <p>Enforce required keys and avoid defaults. This aim to follow the geojson specification to the letter.</p> <pre><code># Before\nFeature(geometry=Point(coordinates=(0,0)))\n\n# Now\nFeature(\n    type=\"Feature\",\n    geometry=Point(\n        type=\"Point\",\n        coordinates=(0,0)\n    ),\n    properties=None,\n)\n</code></pre> </li> <li> <p>Add has_z function to Geometries (author @eseglem, developmentseed/geojson-pydantic!103)</p> </li> <li>Add optional bbox to geometries. (author @eseglem, developmentseed/geojson-pydantic!108)</li> <li>Add support for nested GeometryCollection and a corresponding warning. (author @eseglem, developmentseed/geojson-pydantic!111)</li> </ul>"},{"location":"release-notes/#changed_1","title":"Changed","text":"<ul> <li>Refactor and simplify WKT construction (author @eseglem, developmentseed/geojson-pydantic!97)</li> <li>Support empty geometry coordinates (author @eseglem, developmentseed/geojson-pydantic!100)</li> <li>Refactored <code>__geo_interface__</code> to be a Mixin which returns <code>self.dict</code> (author @eseglem, developmentseed/geojson-pydantic!105)</li> <li>GeometryCollection containing a single geometry or geometries of only one type will now produce a warning. (author @eseglem, developmentseed/geojson-pydantic!111)</li> </ul>"},{"location":"release-notes/#fixed_4","title":"Fixed","text":"<ul> <li>Do not validates arbitrary dictionaries. Make <code>Type</code> a mandatory key for objects (author @vincentsarago, developmentseed/geojson-pydantic!94)</li> <li>Add Geometry discriminator when parsing geometry objects (author @eseglem, developmentseed/geojson-pydantic!101)</li> <li>Mixed Dimensionality WKTs (make sure the coordinates are either all 2D or 3D) (author @eseglem, developmentseed/geojson-pydantic!107)</li> <li>Allow Feature's id to be either a String or a Number (author @vincentsarago, developmentseed/geojson-pydantic!91)</li> </ul>"},{"location":"release-notes/#removed","title":"Removed","text":"<ul> <li>Python 3.7 support (author @vincentsarago, developmentseed/geojson-pydantic!94)</li> <li>Unused <code>LinearRing</code> Model (author @eseglem, developmentseed/geojson-pydantic!106)</li> </ul>"},{"location":"release-notes/#050-2022-12-16","title":"0.5.0 - 2022-12-16","text":""},{"location":"release-notes/#added_4","title":"Added","text":"<ul> <li>python 3.11 support</li> </ul>"},{"location":"release-notes/#fixed_5","title":"Fixed","text":"<ul> <li>Derive WKT type from Geometry's type instead of class name (author @eseglem, developmentseed/geojson-pydantic!81)</li> </ul>"},{"location":"release-notes/#changed_2","title":"Changed","text":"<ul> <li>Replace <code>NumType</code> with <code>float</code> throughout (author @eseglem, developmentseed/geojson-pydantic!83)</li> <li><code>__geo_interface__</code> definition to not use pydantic <code>BaseModel.dict()</code> method and better match the specification</li> <li>Adjusted mypy configuration and updated type definitions to satisfy all rules (author @eseglem, developmentseed/geojson-pydantic!87)</li> <li>Updated pre-commit config to run mypy on the whole library instead of individual changed files.</li> <li>Defaults are more explicit. This keeps pyright from thinking they are required.</li> </ul>"},{"location":"release-notes/#removed_1","title":"Removed","text":"<ul> <li>Remove <code>validate</code> classmethods used to implicitly load json strings (author @eseglem, developmentseed/geojson-pydantic!88)</li> </ul>"},{"location":"release-notes/#043-2022-07-18","title":"0.4.3 - 2022-07-18","text":""},{"location":"release-notes/#fixed_6","title":"Fixed","text":"<ul> <li>The bbox key should not be in a <code>__geo_interface__</code> object if the bbox is None (author @yellowcap, developmentseed/geojson-pydantic!77)</li> </ul>"},{"location":"release-notes/#042-2022-06-13","title":"0.4.2 - 2022-06-13","text":""},{"location":"release-notes/#added_5","title":"Added","text":"<ul> <li><code>GeometryCollection</code> as optional input to geometry field in <code>Feature</code> (author @davidraleigh, developmentseed/geojson-pydantic!72)</li> </ul>"},{"location":"release-notes/#041-2022-06-10","title":"0.4.1 - 2022-06-10","text":""},{"location":"release-notes/#added_6","title":"Added","text":"<ul> <li> <p><code>Geometry</code> and <code>GeometryCollection</code> validation from dict or string (author @Vikka, developmentseed/geojson-pydantic!69)</p> <pre><code>Point.validate('{\"coordinates\": [1.0, 2.0], \"type\": \"Point\"}')\n&gt;&gt; Point(coordinates=(1.0, 2.0), type='Point')\n</code></pre> </li> <li> <p><code>Feature</code> and <code>FeatureCollection</code> validation from dict or string</p> <pre><code>FeatureCollection.validate('{\"type\": \"FeatureCollection\", \"features\": [{\"type\": \"Feature\", \"geometry\": {\"coordinates\": [1.0, 2.0], \"type\": \"Point\"}}]}')\n&gt;&gt; FeatureCollection(type='FeatureCollection', features=[Feature(type='Feature', geometry=Point(coordinates=(1.0, 2.0), type='Point'), properties=None, id=None, bbox=None)], bbox=None)\n</code></pre> </li> </ul>"},{"location":"release-notes/#040-2022-06-03","title":"0.4.0 - 2022-06-03","text":""},{"location":"release-notes/#added_7","title":"Added","text":"<ul> <li> <p><code>.wkt</code> property for Geometry object     <pre><code>from geojson_pydantic.geometries import Point\n\nPoint(coordinates=(1, 2)).wkt\n&gt;&gt; 'POINT (1.0 2.0)'\n</code></pre></p> </li> <li> <p><code>.exterior</code> and <code>.interiors</code> properties for <code>geojson_pydantic.geometries.Polygon</code> object.     <pre><code>from geojson_pydantic.geometries import Polygon\npolygon = Polygon(\n    coordinates=[\n        [(0, 0), (0, 10), (10, 10), (10, 0), (0, 0)],\n        [(2, 2), (2, 4), (4, 4), (4, 2), (2, 2)],\n    ]\n)\npolygon.exterior\n&gt;&gt; [(0.0, 0.0), (0.0, 10.0), (10.0, 10.0), (10.0, 0.0), (0.0, 0.0)]\n\nlist(polygon.interiors)\n&gt;&gt; [[(2.0, 2.0), (2.0, 4.0), (4.0, 4.0), (4.0, 2.0), (2.0, 2.0)]]\n</code></pre></p> </li> <li> <p><code>__geo_interface__</code> to <code>geojson_pydantic.geometries.GeometryCollection</code> object</p> </li> <li><code>__geo_interface__</code> to <code>geojson_pydantic.feature.Feature</code> and <code>geojson_pydantic.feature.FeatureCollection</code> object</li> <li><code>geojson_pydantic.__all__</code> to declaring public objects (author @farridav, developmentseed/geojson-pydantic!52)</li> </ul>"},{"location":"release-notes/#changed_3","title":"Changed","text":"<ul> <li>switch to <code>pyproject.toml</code></li> <li>rename <code>geojson_pydantic.version</code> to <code>geojson_pydantic.__version__</code></li> </ul>"},{"location":"release-notes/#fixed_7","title":"Fixed","text":"<ul> <li>changelog compare links</li> </ul>"},{"location":"release-notes/#034-2022-04-28","title":"0.3.4 - 2022-04-28","text":"<ul> <li>Fix optional geometry and bbox fields on <code>Feature</code>; allowing users to pass in <code>None</code> or even omit either field (author @moradology, developmentseed/geojson-pydantic!56)</li> <li>Fix <code>Polygon.from_bounds</code> to respect geojson specification and return counterclockwise linear ring (author @jmfee-usgs, developmentseed/geojson-pydantic!49)</li> </ul>"},{"location":"release-notes/#033-2022-03-04","title":"0.3.3 - 2022-03-04","text":"<ul> <li>Follow geojson specification and make feature geometry optional (author @yellowcap, developmentseed/geojson-pydantic!47)     <pre><code>from geojson_pydantic import Feature\n# Before\nfeature = Feature(type=\"Feature\", geometry=None, properties={})\n\n&gt;&gt; ValidationError: 1 validation error for Feature\ngeometry none is not an allowed value (type=type_error.none.not_allowed)\n\n# Now\nfeature = Feature(type=\"Feature\", geometry=None, properties={})\nassert feature.geometry is None\n</code></pre></li> </ul>"},{"location":"release-notes/#032-2022-02-21","title":"0.3.2 - 2022-02-21","text":"<ul> <li>fix <code>parse_geometry_obj</code> potential bug (author @geospatial-jeff, developmentseed/geojson-pydantic!45)</li> <li>improve type definition (and validation) for geometry coordinate arrays (author @geospatial-jeff, developmentseed/geojson-pydantic!44)</li> </ul>"},{"location":"release-notes/#031-2021-08-04","title":"0.3.1 - 2021-08-04","text":""},{"location":"release-notes/#added_8","title":"Added","text":"<ul> <li><code>Polygon.from_bounds</code> class method to create a Polygon geometry from a bounding box.     <pre><code>from geojson_pydantic import Polygon\nprint(Polygon.from_bounds((1, 2, 3, 4)).dict(exclude_none=True))\n&gt;&gt; {'coordinates': [[(1.0, 2.0), (1.0, 4.0), (3.0, 4.0), (3.0, 2.0), (1.0, 2.0)]], 'type': 'Polygon'}\n</code></pre></li> </ul>"},{"location":"release-notes/#fixed_8","title":"Fixed","text":"<ul> <li>Added validation for Polygons with zero size.</li> </ul>"},{"location":"release-notes/#030-2021-05-25","title":"0.3.0 - 2021-05-25","text":""},{"location":"release-notes/#added_9","title":"Added","text":"<ul> <li> <p><code>Feature</code> and <code>FeatureCollection</code> model generics to support custom geometry and/or properties validation (author @iwpnd, developmentseed/geojson-pydantic!29)</p> <pre><code>from pydantic import BaseModel\nfrom geojson_pydantic.features import Feature\nfrom geojson_pydantic.geometries import Polygon\n\nclass MyFeatureProperties(BaseModel):\n    name: str\n    value: int\n\nfeature = Feature[Polygon, MyFeatureProperties](\n    **{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n            [\n                [13.38272,52.46385],\n                [13.42786,52.46385],\n                [13.42786,52.48445],\n                [13.38272,52.48445],\n                [13.38272,52.46385]\n            ]\n            ]\n        },\n        \"properties\": {\n            \"name\": \"test\",\n            \"value\": 1\n        }\n    }\n)\n</code></pre> </li> <li> <p>Top level export (developmentseed/geojson-pydantic!34)</p> <pre><code># before\nfrom geojson_pydantic.features import Feature, FeatureCollection\nfrom geojson_pydantic.geometries import Polygon\n\n# now\nfrom geojson_pydantic import Feature, Polygon\n</code></pre> </li> </ul>"},{"location":"release-notes/#removed_2","title":"Removed","text":"<ul> <li>Drop python 3.6 support</li> <li>Renamed <code>utils.py</code> to <code>types.py</code></li> <li>Removed <code>Coordinate</code> type in <code>geojson_pydantic.features</code> (replaced by <code>Position</code>)</li> </ul>"},{"location":"release-notes/#023-2021-05-05","title":"0.2.3 - 2021-05-05","text":""},{"location":"release-notes/#fixed_9","title":"Fixed","text":"<ul> <li>incorrect version number set in <code>__init__.py</code></li> </ul>"},{"location":"release-notes/#022-2020-12-29","title":"0.2.2 - 2020-12-29","text":""},{"location":"release-notes/#added_10","title":"Added","text":"<ul> <li>Made collections iterable (#12)</li> <li>Added <code>parse_geometry_obj</code> function (#9)</li> </ul>"},{"location":"release-notes/#021-2020-08-07","title":"0.2.1 - 2020-08-07","text":"<p>Although the type file was added in <code>0.2.0</code> it wasn't included in the distributed package. Use this version <code>0.2.1</code> for type annotations.</p>"},{"location":"release-notes/#fixed_10","title":"Fixed","text":"<ul> <li>Correct package type information files</li> </ul>"},{"location":"release-notes/#020-2020-08-06","title":"0.2.0 - 2020-08-06","text":""},{"location":"release-notes/#added_11","title":"Added","text":"<ul> <li>Added documentation on locally running tests (#3)</li> <li>Publish type information (#6)</li> </ul>"},{"location":"release-notes/#changed_4","title":"Changed","text":"<ul> <li>Removed geojson dependency (#4)</li> </ul>"},{"location":"release-notes/#fixed_11","title":"Fixed","text":"<ul> <li>Include MultiPoint as a valid geometry for a Feature (#1)</li> </ul>"},{"location":"release-notes/#010-2020-05-21","title":"0.1.0 - 2020-05-21","text":""},{"location":"release-notes/#added_12","title":"Added","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"migrations/v1.0_migration/","title":"v0.6 -> v1.0","text":"<p><code>geojson-pydantic</code> version 1.0 introduced many breaking changes. This document aims to help with migrating your code to use <code>geojson-pydantic</code> 1.0.</p>"},{"location":"migrations/v1.0_migration/#pydantic-20","title":"Pydantic 2.0","text":"<p>The biggest update introduced in 1.0 is the new pydantic major version requirement ~2.0.</p> <p>In addition to being faster, this new major version has plenty of new API which we used in <code>geojson-pydantic</code> (like the new <code>model_serializer</code> method).</p> <pre><code>from geojson_pydantic import Point\n\n# Before\nPoint.dict()  # serialize to dict object\nPoint.json()  # serialize to json string\n\nwith open(\"point.geojson\") as f:\n    Point.parse_file(f)  # parse file content to model\n\np = {}\nPoint.parse_obj(obj)  # parse dict object\n\n##################\n# Now (geojson-pydantic ~= 1.0)\n\nPoint.model_dump()\nPoint.model_dump_json()\n\nwith open(\"point.geojson\") as f:\n    Point.model_validate_json(f.read())\n\np = {}\nPoint.model_validate(obj)\n</code></pre> <p>ref: developmentseed/geojson-pydantic!130</p>"},{"location":"migrations/v1.0_migration/#featurecollection-generic-model","title":"FeatureCollection Generic model","text":"<p>In 1.0 we updated the generic FeatureCollection model to depends only on a generic Feature model.</p> <pre><code># Before\nFeatureCollection[Geometry, Properties]\n\n# Now (geojson-pydantic ~= 1.0)\nFeatureCollection[Feature[Geometry, Properties]]\n</code></pre> <p>e.g</p> <pre><code>from pydantic import BaseModel\nfrom geojson_pydantic import Feature, FeatureCollection, Polygon\n\nclass CustomProperties(BaseModel):\n    id: str\n    description: str\n    size: int\n\n# Create a new FeatureCollection Model which should only\n# Accept Features with Polygon geometry type and matching the properties\nMyFc = FeatureCollection[Feature[Polygon, CustomProperties]]\n</code></pre> <p>ref: developmentseed/geojson-pydantic#134</p>"},{"location":"migrations/v1.0_migration/#exclude-bbox-and-id-if-null","title":"Exclude <code>bbox</code> and <code>id</code> if null","text":"<p>Using the new pydantic <code>model_serializer</code> method, we are now able to <code>customize</code> JSON output for the models to better match the GeoJSON spec</p> <pre><code># Before\nPoint(type=\"Point\", coordinates=[0, 0]).json()\n&gt;&gt; '{\"type\":\"Point\",\"coordinates\":[0.0,0.0],\"bbox\":null}'\n\n# Now (geojson-pydantic ~= 1.0)\nPoint(type=\"Point\", coordinates=[0, 0]).model_dump_json()\n&gt;&gt; '{\"type\":\"Point\",\"coordinates\":[0.0,0.0]}'\n</code></pre> <p>ref: developmentseed/geojson-pydantic#125</p>"},{"location":"migrations/v1.0_migration/#change-in-wkt-output-for-multi-geometries","title":"Change in WKT output for Multi* geometries","text":"<pre><code>from geojson_pydantic import MultiPoint\n\ngeom = MultiPoint(type='MultiPoint', coordinates=[(1.0, 2.0, 3.0)])\n\n# Before\nprint(geom.wkt)\n&gt;&gt; MULTIPOINT Z (1 2 3)\n\n# Now (geojson-pydantic ~= 1.0)\nprint(geom.wkt)\n&gt;&gt; MULTIPOINT Z ((1 2 3))\n</code></pre> <p>ref: developmentseed/geojson-pydantic#139</p>"}]}